/**
 * @file
 * 
 * This file contains modifications on top of the FreeRTOS tasks.c code
 * You should not build this file as we append this file inside of tasks.c file
 * By #including this file at the end of tasks.c, we can access private members of the tasks.c source code
 */

#if (1 == configGENERATE_RUN_TIME_STATS)
BaseType_t uxTaskGetCpuUsage(TaskHandle_t xTask) {
  tskTCB *pxTCB = prvGetTCBFromHandle(xTask);
  uint64_t taskRunTime = pxTCB->ulRunTimeCounter;
  uint32_t ulTotalRunTime;

  #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
    portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
  #else
    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
  #endif

  return (taskRunTime * 100) / ulTotalRunTime;
}

static void prvResetRunTimeStatsInList(List_t *pxList) {
  volatile tskTCB *pxNextTCB, *pxFirstTCB;

  listGET_OWNER_OF_NEXT_ENTRY(pxFirstTCB, pxList);
  do {
    listGET_OWNER_OF_NEXT_ENTRY(pxNextTCB, pxList);
    pxNextTCB->ulRunTimeCounter = 0;
  } while (pxNextTCB != pxFirstTCB);
}

void vTaskResetRunTimeStats(void) {
  BaseType_t uxQueue = configMAX_PRIORITIES;
  vTaskSuspendAll();
  {
    do {
      uxQueue--;
      if (listLIST_IS_EMPTY(&(pxReadyTasksLists[uxQueue])) == pdFALSE) {
        prvResetRunTimeStatsInList((List_t *)&(pxReadyTasksLists[uxQueue]));
      }
    } while (uxQueue > (unsigned portBASE_TYPE)tskIDLE_PRIORITY);

    if (listLIST_IS_EMPTY(pxDelayedTaskList) == pdFALSE) {
      prvResetRunTimeStatsInList((List_t *)pxDelayedTaskList);
    }

    if (listLIST_IS_EMPTY(pxOverflowDelayedTaskList) == pdFALSE) {
      prvResetRunTimeStatsInList((List_t *)pxOverflowDelayedTaskList);
    }

#if (INCLUDE_vTaskDelete == 1)
    {
      if (listLIST_IS_EMPTY(&xTasksWaitingTermination) == pdFALSE) {
        prvResetRunTimeStatsInList((List_t *)&xTasksWaitingTermination);
      }
    }
#endif

#if (INCLUDE_vTaskSuspend == 1)
    {
      if (listLIST_IS_EMPTY(&xSuspendedTaskList) == pdFALSE) {
        prvResetRunTimeStatsInList((List_t *)&xSuspendedTaskList);
      }
    }
#endif
    ulTaskSwitchedInTime = 0;
    portRESET_TIMER_FOR_RUN_TIME_STATS();
  }
  xTaskResumeAll();
}

void vRunTimeStatIsrEntry(void) {
  unsigned long ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();

  // Add the time spent in the previously running task's counter.
  if (NULL != pxCurrentTCB) {
    pxCurrentTCB->ulRunTimeCounter += (ulTempCounter - ulTaskSwitchedInTime);
  }

  // Save the current time to log how long the ISR is going to take.
  ulTaskSwitchedInTime = ulTempCounter;
}
void vRunTimeStatIsrExit(void) {
  unsigned long ulTempCounter = portGET_RUN_TIME_COUNTER_VALUE();

  // ISR spent current time - entry of ISR, which was saved in ulTaskSwitchedInTime
  // We don't need this because whatever is the "leftover" for the counters, that is
  // is the overhead itself!
  // ulISROverhead += ( ulTempCounter - ulTaskSwitchedInTime );

  // Save the current time so next time when task is switched out, it will use this time-stamp.
  ulTaskSwitchedInTime = ulTempCounter;
}
#else /* configGENERATE_RUN_TIME_STATS */
void vRunTimeStatIsrEntry(void) {}
void vRunTimeStatIsrExit(void) {}
#endif
